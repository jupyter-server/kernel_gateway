[build-system]
requires = ["hatchling>=1.5"]
build-backend = "hatchling.build"

[project]
name = "jupyter-kernel-gateway"
dynamic = ["version"]
description = "A web server for spawning and communicating with Jupyter kernels"
readme = "README.md"
license = { file = "LICENSE.md" }
requires-python = ">=3.8"
authors = [
    { name = "Jupyter Development Team", email = "jupyter@googlegroups.com" },
]
keywords = [
    "Cloud",
    "Interactive",
    "Interpreter",
    "Kernel",
    "Web",
]
classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
dependencies = [
    "jupyter_client>=8.6",
    "jupyter_core>=5.7",
    "jupyter_server>=2.12",
    "requests>=2.31",
    "tornado>=6.4",
    "traitlets>=5.14.1",
]

[project.scripts]
jupyter-kernelgateway = "kernel_gateway:launch_instance"

[project.urls]
Homepage = "http://github.com/jupyter-incubator/kernel_gateway"

[project.optional-dependencies]
test = [
  "coverage",
  "pytest",
  "pytest-cov",
  "pytest_jupyter",
  "pytest-timeout",
  "ipykernel",
]
docs = [
  "sphinx_rtd_theme",
  "sphinx",
  "myst-parser",
]

[tool.hatch.version]
path = "kernel_gateway/_version.py"
validate-bump = false

[tool.hatch.build.targets.sdist]
include = [
    "/kernel_gateway",
    "/tests"
]

[tool.hatch.build.targets.wheel]
packages = ["kernel_gateway"]

[tool.hatch.envs.docs]
features = ["docs"]
[tool.hatch.envs.docs.scripts]
build = "make -C docs html SPHINXOPTS='-W'"

[tool.hatch.envs.test]
features = ["test"]
[tool.hatch.envs.test.scripts]
list = "python -m pip freeze"
test = "python -m pytest -vv {args}"
nowarn = "test -W default {args}"

[tool.hatch.envs.cov]
features = ["test"]
dependencies = ["coverage[toml]", "pytest-cov"]
[tool.hatch.envs.cov.scripts]
test = "python -m pytest -vv --cov kernel_gateway --cov-branch --cov-report term-missing:skip-covered {args}"
nowarn = "test -W default {args}"

[tool.hatch.envs.typing]
dependencies = ["pre-commit"]
detached = true
[tool.hatch.envs.typing.scripts]
test = "pre-commit run --all-files --hook-stage manual mypy"

[tool.hatch.envs.lint]
dependencies = ["pre-commit"]
detached = true
[tool.hatch.envs.lint.scripts]
build = [
  "pre-commit run --all-files ruff",
  "pre-commit run --all-files ruff-format"
]

[tool.ruff.lint]
extend-select = [
  "B",           # flake8-bugbear
  "I",           # isort
  "C4",          # flake8-comprehensions
  #"EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  #"G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  #"PTH",         # flake8-use-pathlib
  #"PT",          # flake8-pytest-style
  #"RET",         # flake8-return
  #"RUF",         # Ruff-specific
  #"SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "PYI",         # flake8-pyi
  "S",           # flake8-bandit
]
ignore = [
  "PLR",    # Design related pylint codes
  "S101",   # Use of `assert` detected
]
unfixable = [
  # Don't touch print statements
  "T201",
  # Don't touch unused imports
  "F401",
  "F403",
  # Don't touch noqa lines
  "RUF100",
]

[tool.ruff]
line-length = 100

[tool.ruff.format]
docstring-code-format = true

[tool.mypy]
python_version = "3.8"
explicit_package_bases = true
strict = true
pretty = true
warn_unreachable = true
disable_error_code = ["no-untyped-def", "no-untyped-call"]
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["T201", "S", "RET", "EM"]
"etc/*" = ["T201", "S", "RET"]

[tool.pytest.ini_options]
minversion = "6.0"
xfail_strict = true
log_cli_level = "info"
addopts = [
  "-ra", "--durations=10", "--color=yes", "--doctest-modules",
   "--showlocals", "--strict-markers", "--strict-config"
]
testpaths = [
    "tests/"
]
filterwarnings = [
  "error",
  "module:datetime.datetime.utc:DeprecationWarning",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]

[tool.coverage.run]
relative_files = true
source = ["kernel_gateway"]

[tool.interrogate]
ignore-init-module=true
ignore-private=true
ignore-semiprivate=true
ignore-property-decorators=true
ignore-nested-functions=true
ignore-nested-classes=true
fail-under=70
exclude = ["docs", "etc", "scripts", "tests"]

[tool.repo-review]
ignore = ["GH102", "PC111"]
